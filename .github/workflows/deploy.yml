name: Deploy with Security Scan
on:
    push:
        branches:
            - main
jobs:
    security-scan:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        - name: Gitleaks Action
          uses: zricethezav/gitleaks-action@master

        - name: Build Docker image
          run: docker build -t jobfair-front .

        - name: Run Trivy vulnerability scanner
          uses: aquasecurity/trivy-action@master
          with:
            image-ref: 'jobfair-front'
            format: 'table'
            exit-code: '1'
            ignore-unfixed: true
            vuln-type: 'os,library'
            severity: 'CRITICAL,HIGH'

    deploy:
        needs: security-scan
        runs-on: ubuntu-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v4
    
        - name: Install cloudflared
          run: |
            sudo mkdir -p --mode=0755 /usr/share/keyrings
            curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg >/dev/null
            echo 'deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared jammy main' | sudo tee /etc/apt/sources.list.d/cloudflared.list
            sudo apt-get update && sudo apt-get install cloudflared
    
        - name: Set up SSH config
          run: |
            mkdir -p ~/.ssh
            echo "Host ${{ secrets.SERVER_HOSTNAME }}" >> ~/.ssh/config
            echo "  ProxyCommand /usr/bin/cloudflared access ssh --hostname %h" >> ~/.ssh/config

        - name: Install sshpass
          run: sudo apt-get install sshpass

        - name: Execute commands on server
          env:
            SSHPASS: ${{ secrets.SERVER_PASSWORD }}
          run: |
            sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOSTNAME }} << 'EOF'
              cd ~/Documents/SW-FRONTEND
              if [ ! -d "JOBFAIR-FRONT" ]; then
                gh repo clone NAPHATAR/JOBFAIR-FRONT
              else
                cd JOBFAIR-FRONT
                git pull origin main
              fi
              cd JOBFAIR-FRONT
              echo "NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }}" > .env
              docker image prune -af
              docker build -t jobfair-front .
              docker stop jobfair-frontend || true
              docker rm jobfair-frontend || true
              docker run -itd -p 3050:3050 --name jobfair-frontend jobfair-front
              cd ../
              rm -rf JOBFAIR-FRONT
            EOF